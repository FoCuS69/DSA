// Assignment No. 6 - Graph Traversal (BFS & DFS)

#include <iostream>
using namespace std;

class Graph {
    int vcnt;                  // Number of vertices
    int adj[20][20];           // Adjacency matrix
    int visited[20];           // Visited vertices

public:
    Graph() {
        vcnt = 0;
        for (int i = 0; i < 20; i++) visited[i] = 0;
    }

    void inputMatrix();
    void displayMatrix();
    void bfs();
    void dfs();
    void resetVisited();
};

class Queue {
    int q[20], front, rear;

public:
    Queue() { front = rear = 0; }

    void insert(int val) {
        if (rear < 20) q[rear++] = val;
        else cout << "Queue is full.\n";
    }

    int remove() {
        if (front != rear) return q[front++];
        else {
            cout << "Queue is empty.\n";
            return -1;
        }
    }

    bool isEmpty() {
        return front == rear;
    }
};

class Stack {
    int s[20], top;

public:
    Stack() { top = -1; }

    void push(int val) {
        if (top < 19) s[++top] = val;
        else cout << "Stack is full.\n";
    }

    int pop() {
        if (top != -1) return s[top--];
        else {
            cout << "Stack is empty.\n";
            return -1;
        }
    }

    bool isEmpty() {
        return top == -1;
    }
};

void Graph::inputMatrix() {
    cout << "Enter number of vertices: ";
    cin >> vcnt;
    for (int i = 1; i <= vcnt; i++) {
        for (int j = 1; j <= vcnt; j++) {
            cout << "Edge from " << i << " to " << j << " (1 for edge, 0 for no edge): ";
            cin >> adj[i][j];
        }
    }
}

void Graph::displayMatrix() {
    cout << "\nAdjacency Matrix:\n";
    for (int i = 1; i <= vcnt; i++) {
        for (int j = 1; j <= vcnt; j++) {
            cout << adj[i][j] << " ";
        }
        cout << endl;
    }
}

void Graph::resetVisited() {
    for (int i = 0; i < 20; i++) visited[i] = 0;
}

void Graph::bfs() {
    resetVisited();
    int sv;
    cout << "Enter starting vertex: ";
    cin >> sv;

    Queue q;
    q.insert(sv);
    visited[sv] = 1;

    cout << "BFS Traversal: ";
    while (!q.isEmpty()) {
        int curr = q.remove();
        if (curr == -1) break;
        cout << curr << " ";

        for (int i = 1; i <= vcnt; i++) {
            if (adj[curr][i] == 1 && visited[i] == 0) {
                q.insert(i);
                visited[i] = 1;
            }
        }
    }
    cout << endl;
}

void Graph::dfs() {
    resetVisited();
    int sv;
    cout << "Enter starting vertex: ";
    cin >> sv;

    Stack st;
    st.push(sv);
    visited[sv] = 1;

    cout << "DFS Traversal: ";
    while (!st.isEmpty()) {
        int curr = st.pop();
        if (curr == -1) break;
        cout << curr << " ";

        for (int i = vcnt; i >= 1; i--) {  // Reverse to match traditional DFS order
            if (adj[curr][i] == 1 && visited[i] == 0) {
                st.push(i);
                visited[i] = 1;
            }
        }
    }
    cout << endl;
}

int main() {
    Graph g;
    int ch;

    do {
        cout << "\n--- MENU ---\n";
        cout << "1. Insert Matrix\n";
        cout << "2. Display Matrix\n";
        cout << "3. BFS\n";
        cout << "4. DFS\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1: g.inputMatrix(); break;
            case 2: g.displayMatrix(); break;
            case 3: g.bfs(); break;
            case 4: g.dfs(); break;
            case 5: cout << "Exiting program...\n"; break;
            default: cout << "Invalid choice!\n";
        }
    } while (ch != 5);

    return 0;
}
