#include <iostream>
#define max 20
using namespace std;

class set {
    int A[max], cnt;

public:
    set() {
        for (int i = 0; i < max; i++) {
            A[i] = '\0';
        }
        cnt = 0;
    }

    void insert();
    void display();
    int search(int);
    void size();
    void del();
    void union1(set, set);
    set union2(set);
    void intersection(set, set);
    void minus(set, set);
    void subset(set, set);
    void reset();
};

void set::insert() {
    int x;
    cout << "\nEnter element to insert: ";
    cin >> x;
    A[cnt] = x;
    cnt++;
}

void set::display() {
    cout << "\nSet contents: ";
    for (int i = 0; i < cnt; i++) {
        cout << A[i] << " ";
    }
}

void set::size() {
    cout << "\nSize of the set: " << cnt;
}

int set::search(int x) {
    for (int i = 0; i < max; i++) {
        if (A[i] == x) {
            cout << "\nElement found.";
            return i;
        }
    }
    return -1;
}

void set::del() {
    int x, index;
    cout << "\nEnter element to delete: ";
    cin >> x;
    index = search(x);
    for (int i = index; i < max; i++) {
        A[i] = A[i + 1];
    }
    cnt--;
}

void set::union1(set m, set n) {
    for (int i = 0; i < m.cnt; i++) {
        A[i] = m.A[i];
    }
    cnt = m.cnt;
    for (int i = 0; i < n.cnt; i++) {
        if (search(n.A[i]) == -1) {
            A[cnt] = n.A[i];
            cnt++;
        }
    }
}

set set::union2(set k) {
    set temp;
    for (int i = 0; i < cnt; i++) {
        temp.A[i] = A[i];
    }
    temp.cnt = cnt;
    for (int i = 0; i < k.cnt; i++) {
        if (search(k.A[i]) == -1) {
            temp.A[temp.cnt] = k.A[i];
            temp.cnt++;
        }
    }
    return temp;
}

void set::intersection(set m, set n) {
    for (int i = 0; i < n.cnt; i++) {
        if (m.search(n.A[i]) != -1) {
            A[cnt] = n.A[i];
            cnt++;
        }
    }
}

void set::minus(set m, set n) {
    for (int i = 0; i < n.cnt; i++) {
        if (m.search(n.A[i]) == -1) {
            A[cnt] = n.A[i];
            cnt++;
        }
    }
}

void set::subset(set m, set n) {
    int scnt = 0;
    for (int i = 0; i < n.cnt; i++) {
        if (m.search(n.A[i]) != -1) {
            scnt++;
        }
    }
    if (scnt == n.cnt) {
        cout << "\nB is a subset of A";
    } else {
        cout << "\nB is not a subset of A";
    }
}

void set::reset() {
    for (int i = 0; i < cnt; i++) {
        A[i] = '\0';
    }
    cnt = 0;
}

int main() {
    set s, a, b;
    int ch;
    do {
        cout << "\n-------MENU-------";
        cout << "\n1. Insert SET";
        cout << "\n2. Insert A";
        cout << "\n3. Insert B";
        cout << "\n4. Display";
        cout << "\n5. Size";
        cout << "\n6. Search";
        cout << "\n7. Delete";
        cout << "\n8. Union 1";
        cout << "\n9. Intersection";
        cout << "\n10. Minus (A-B)";
        cout << "\n11. Minus (B-A)";
        cout << "\n12. Subset";
        cout << "\n13. Reset";
        cout << "\n14. Exit";
        cout << "\nEnter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1: s.insert(); break;
            case 2: a.insert(); break;
            case 3: b.insert(); break;
            case 4: s.display(); a.display(); b.display(); break;
            case 5: s.size(); a.size(); b.size(); break;
            case 6:
                int x;
                cout << "\nEnter element to search: ";
                cin >> x;
                s.search(x);
                break;
            case 7: s.del(); break;
            case 8: s.union1(a, b); break;
            case 9: s.intersection(a, b); break;
            case 10: s.minus(a, b); break;
            case 11: s.minus(b, a); break;
            case 12: s.subset(a, b); break;
            case 13: s.reset(); a.reset(); b.reset(); break;
            case 14: exit(0); break;
            default: cout << "\nInvalid choice entered...";
        }
    } while (ch != 14);

    return 0;
}
