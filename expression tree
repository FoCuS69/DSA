#include <iostream>
#include <string.h>
#define MAX 10
using namespace std;

class node {
public:
    char data;
    node *left, *right;
};

class stack {
    node *stk[MAX];
    int top;
public:
    stack() { top = -1; }
    bool isempty() { return top == -1; }
    bool isfull() { return top == MAX - 1; }
    void push(node *x) {
        if (!isfull()) stk[++top] = x;
        else cout << "\nStack is full";
    }
    node* pop() {
        if (!isempty()) return stk[top--];
        else return NULL;
    }
    void display() {
        for (int i = 0; i <= top; i++)
            cout << stk[i]->data << " ";
    }
};

class expr {
    node* root;
public:
    expr() { root = NULL; }
    node* getroot() { return root; }
    void createexpr() {
        node* new1;
        char str[15];
        stack s;
        cout << "\nEnter a prefix expression: ";
        cin >> str;
        int length = strlen(str);
        for (int i = length - 1; i >= 0; i--) {
            new1 = new node;
            new1->data = str[i];
            new1->left = new1->right = NULL;
            if (strchr("+-*/%", new1->data)) {
                new1->left = s.pop();
                new1->right = s.pop();
            }
            s.push(new1);
        }
        root = s.pop();
    }
    void inorder(node* root) {
        if (root != NULL) {
            inorder(root->left);
            cout << root->data;
            inorder(root->right);
        }
    }
};

int main() {
    int ch;
    stack g;
    expr e;

    do {
        cout << "\n--------MENU-------";
        cout << "\n1. Push";
        cout << "\n2. Pop";
        cout << "\n3. Display";
        cout << "\n4. Expression Tree";
        cout << "\n5. Exit";
        cout << "\nEnter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1: {
                node *nn = new node();
                cout << "\nEnter element to push: ";
                cin >> nn->data;
                nn->left = nn->right = NULL;
                g.push(nn);
                break;
            }
            case 2: {
                node *t = g.pop();
                if (t) cout << "\nElement has been popped: " << t->data;
                else cout << "\nStack is empty.";
                break;
            }
            case 3:
                g.display();
                break;
            case 4:
                e.createexpr();
                cout << "Inorder expression: ";
                e.inorder(e.getroot());
                break;
            case 5:
                cout << "\nExiting program.";
                break;
            default:
                cout << "\nInvalid choice entered";
        }
    } while (ch != 5);

    return 0;
}
