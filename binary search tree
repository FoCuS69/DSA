#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
};

class BST {
public:
    Node* root;
    int cnt;

    BST() {
        root = NULL;
        cnt = 0;
    }

    void insert() {
        Node *newNode = new Node(), *temp;
        newNode->left = newNode->right = NULL;
        cout << "Enter data: ";
        cin >> newNode->data;

        if (!root) {
            root = newNode;
        } else {
            temp = root;
            while (true) {
                if (newNode->data < temp->data) {
                    if (!temp->left) {
                        temp->left = newNode;
                        break;
                    }
                    temp = temp->left;
                } else if (newNode->data > temp->data) {
                    if (!temp->right) {
                        temp->right = newNode;
                        break;
                    }
                    temp = temp->right;
                } else {
                    cout << "Duplicate data.\n";
                    delete newNode;
                    break;
                }
            }
        }
    }

    void inorder(Node* temp) {
        if (temp) {
            inorder(temp->left);
            cout << temp->data << " ";
            cnt++;
            inorder(temp->right);
        }
    }

    void preorder(Node* temp) {
        if (temp) {
            cout << temp->data << " ";
            preorder(temp->left);
            preorder(temp->right);
        }
    }

    void smallest() {
        Node* temp = root;
        while (temp && temp->left)
            temp = temp->left;
        if (temp)
            cout << "Smallest: " << temp->data << endl;
    }

    void largest() {
        Node* temp = root;
        while (temp && temp->right)
            temp = temp->right;
        if (temp)
            cout << "Largest: " << temp->data << endl;
    }

    void mirror(Node* root) {
        if (root) {
            swap(root->left, root->right);
            mirror(root->left);
            mirror(root->right);
        }
    }

    int search(int key) {
        Node* temp = root;
        while (temp) {
            if (key < temp->data)
                temp = temp->left;
            else if (key > temp->data)
                temp = temp->right;
            else
                return 1;
        }
        return 0;
    }

    int height(Node* root) {
        if (!root)
            return 0;
        int lh = height(root->left);
        int rh = height(root->right);
        return 1 + max(lh, rh);
    }
};

int main() {
    BST tree;
    int choice;

    do {
        cout << "\nMENU\n1. Insert\n2. Inorder\n3. Preorder\n4. Smallest\n5. Largest\n6. Mirror\n7. Search\n8. Height\n9. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                tree.insert();
                break;
            case 2:
                cout << "Inorder: ";
                tree.inorder(tree.root);
                cout << endl;
                break;
            case 3:
                cout << "Preorder: ";
                tree.preorder(tree.root);
                cout << endl;
                break;
            case 4:
                tree.smallest();
                break;
            case 5:
                tree.largest();
                break;
            case 6:
                tree.mirror(tree.root);
                cout << "Mirror (Inorder): ";
                tree.inorder(tree.root);
                cout << endl;
                break;
            case 7: {
                int key;
                cout << "Enter key: ";
                cin >> key;
                if (tree.search(key))
                    cout << "Found\n";
                else
                    cout << "Not Found\n";
                break;
            }
            case 8:
                cout << "Height: " << tree.height(tree.root) << endl;
                break;
            case 9:
                cout << "Program ended.\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 9);

    return 0;
}
