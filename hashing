#include <iostream>
using namespace std;

class HashTable {
public:
    int key;
    int index;
};

class Hashing {
private:
    HashTable H[10];
public:
    Hashing() {
        for (int i = 0; i < 10; i++) {
            H[i].key = -1;
            H[i].index = i;
        }
    }

    void display() {
        cout << "Hash Table:\n";
        for (int i = 0; i < 10; i++) {
            cout << H[i].key << "\t\t" << H[i].index << endl;
        }
    }

    void insert(int choice) {
        int key, pos;
        cout << "Enter telephone number: ";
        cin >> key;
        pos = key % 10;

        if (H[pos].key == -1) {
            H[pos].key = key;
        } else {
            int newPos = (choice == 1) ? linearProbing(pos) : quadraticProbing(pos);
            if (newPos != -1)
                H[newPos].key = key;
            else
                cout << "Hash table is full.\n";
        }
    }

    int linearProbing(int pos) {
        for (int i = 0; i < 10; i++) {
            int newPos = (pos + i) % 10;
            if (H[newPos].key == -1) return newPos;
        }
        return -1;
    }

    int quadraticProbing(int pos) {
        for (int i = 0; i < 10; i++) {
            int newPos = (pos + i * i) % 10;
            if (H[newPos].key == -1) return newPos;
        }
        return -1;
    }
};

int main() {
    Hashing hashTable;
    int choice, probingChoice;

    do {
        cout << "\n----MENU----\n1. Insert\n2. Display\n3. Exit\nEnter choice: ";
        cin >> choice;

        if (choice == 1) {
            cout << "Probing method:\n1. Linear\n2. Quadratic\nEnter choice: ";
            cin >> probingChoice;
            hashTable.insert(probingChoice);
        } else if (choice == 2) {
            hashTable.display();
        } else if (choice != 3) {
            cout << "Invalid choice.\n";
        }
    } while (choice != 3);

    cout << "Program ended.\n";
    return 0;
}

